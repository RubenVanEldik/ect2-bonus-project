import streamlit as st
import wind
import pv


def _explain(parameters):
    st.markdown(
        f"""
        The windpark has {parameters['wind']['num_turbines']} [Enercon E-126](https://www.enercon.de/en/products/ep-8/e-126/) wind turbines each with a rated power
        of {parameters['wind']['rated_power']}MW and {parameters['pv']['num_panels']:,} [HIT solar panels](https://github.com/RubenVanEldik/ect2-bonus-project/blob/main/input/modules.xlsx) with
        a rated power of {parameters['pv']['rated_power']}W, for a combined peak power of {round(parameters['wind']['capacity'] + parameters['pv']['capacity'], 1)}MW.
    """
    )

    st.subheader("Wind power")
    st.markdown(
        """
        The hourly wind output is calculated by first calculating the wind speed at hub height, power in the wind, and interpolating the power coefficient[1]. These can
        than be used to calculate the power generated by the turbines for each hour in the year.
    """
    )
    st.caption(
        "1) The power coefficients for different wind speeds were gathered from the technical specifications on slide 43 of the wind resources lecture"
    )
    st.latex(
        r"V_{hub,t} = V_{ref,t} \times \frac{log(\frac{h_{hub}}{z_0})}{log(\frac{h_{ref}}{z_0})}"
    )

    st.latex(
        r"P_{wind,t} = 0.5 \times A_{swept} \times \rho_{air} \times {V_{hub,t}}^3"
    )

    st.latex(
        r"E_{elec,wind} = \sum_{t=1}^{8760} N_{turbines} \times C_{p,t} \times P_{wind,t}"
    )

    st.subheader("Solar PV power")
    st.markdown(
        """
        Because I didn't feel like to doing a lot of trigonometry and to improve the accuracy of the model, the PV power output
        is calculated using [pvlib](https://doi.org/10.21105/joss.00884), an open source Python library. This is done in four consecutive steps:

        1. Calculate the solar position for each timestep
        2. Calculate the DNI and DHI for each timestep using the Erbs model
        3. Calculate the effective irradiance (using the plane of array, absolute airmass, and angle of incidence)
        4. Calculate the output of the PV cell (using the effective irradiance, temperature of the cell, and module characteristics)
    """
    )


def calculate(data, parameters):
    st.header("Question 1")

    # Get the input parameters
    wind.ask_input(parameters)
    pv.ask_input(parameters)

    # Calculate the annual wind and solar PV production
    data["production_wind"] = wind.calculate(data, parameters)
    data["production_pv"] = pv.calculate(data, parameters)

    # Show the total annually generated wind and solar PV production
    col1, col2 = st.columns(2)
    col1.metric("Wind production", f"{int(data.production_wind.sum() / 1000)} GWh/year")
    col2.metric("PV production", f"{int(data.production_pv.sum() / 1000)} GWh/year")
    _explain(parameters)
